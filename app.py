import streamlit as st
import dask.dataframe as dd
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO
from typing import Tuple, Dict, Optional
from concurrent.futures import ThreadPoolExecutor

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Calcul des Tarifs de Transport",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fonctions de chargement et de traitement des donn√©es volumineuses
@st.cache_data
def load_data(file_uploader, file_format="parquet") -> dd.DataFrame:
    """Charge les donn√©es avec Dask pour g√©rer des ensembles volumineux."""
    if file_format == "parquet":
        return dd.read_parquet(file_uploader)
    elif file_format == "csv":
        return dd.read_csv(file_uploader)
    else:
        raise ValueError("Format de fichier non support√©. Utilisez 'parquet' ou 'csv'.")

@st.cache_data
def calculer_tarif_avec_taxe(
    partenaire: str,
    service: str, 
    pays: str,
    poids: float,
    tarifs: dd.DataFrame,
    taxe_par_transporteur: Dict[str, float]
) -> Tuple[float, float, float]:
    """Calcule le tarif avec taxe pour une exp√©dition sp√©cifique en utilisant Dask."""
    tarif_ligne = tarifs[
        (tarifs["Partenaire"] == partenaire) &
        (tarifs["Service"] == service) &
        (tarifs["Pays"] == pays) &
        (tarifs["PoidsMin"] <= poids) &
        (tarifs["PoidsMax"] >= poids)
    ].compute()
    
    if tarif_ligne.empty:
        return "Tarif non trouv√©", "Tarif non trouv√©", "Tarif non trouv√©"
    
    tarif_base = tarif_ligne.iloc[0]["Prix"]
    taxe = taxe_par_transporteur.get(service.lower(), 0)
    taxe_gasoil = tarif_base * (taxe / 100)
    return tarif_base, taxe_gasoil, tarif_base + taxe_gasoil

def application_calcul_tarif_batch(
    commandes: dd.DataFrame,
    tarifs: dd.DataFrame,
    taxe_par_transporteur: Dict[str, float],
    prix_achat_df: Optional[dd.DataFrame] = None,
    batch_size: int = 1000
) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Traite les commandes par lots et parall√©lise avec ThreadPoolExecutor pour des performances accrues."""
    has_code_pays = "Code Pays" in commandes.columns
    results = []

    def process_batch(batch):
        batch_results = []
        for _, row in batch.iterrows():
            tarifs_batch = calculer_tarif_avec_taxe(
                row["Nom du partenaire"],
                row["Service de transport"],
                row["Pays destination"],
                row["Poids exp√©dition"],
                tarifs,
                taxe_par_transporteur
            )
            batch_results.append(tarifs_batch)
        return batch_results

    batches = [commandes.loc[i:i + batch_size - 1].compute() for i in range(0, len(commandes), batch_size)]
    
    # Ex√©cution en parall√®le des calculs pour chaque lot
    with ThreadPoolExecutor() as executor:
        for batch_results in executor.map(process_batch, batches):
            results.extend(batch_results)

    # Cr√©ation du DataFrame final
    commandes_processed = commandes.compute()
    commandes_processed[["Tarif de Base", "Taxe Gasoil", "Tarif Total"]] = pd.DataFrame(results)

    mask_tarif_trouve = commandes_processed["Tarif de Base"] != "Tarif non trouv√©"
    commandes_tarif√©es = commandes_processed[mask_tarif_trouve].copy()
    commandes_sans_tarif = commandes_processed[~mask_tarif_trouve].copy()
    
    if prix_achat_df is not None:
        prix_achat_df = prix_achat_df.compute()
        merge_cols = ["Service de transport"]
        if has_code_pays:
            merge_cols.append("Code Pays")
        commandes_tarif√©es = commandes_tarif√©es.merge(
            prix_achat_df, on=merge_cols, how="left"
        ).rename(columns={"Prix Achat": "Prix d'Achat"})
        commandes_tarif√©es["Marge"] = commandes_tarif√©es["Tarif Total"] - commandes_tarif√©es["Prix d'Achat"]
    else:
        commandes_tarif√©es["Prix d'Achat"] = np.nan
        commandes_tarif√©es["Marge"] = np.nan

    return commandes_tarif√©es, commandes_sans_tarif

# Fonctions d'affichage des r√©sultats et des graphiques
def display_results_tab(commandes_tarif√©es: pd.DataFrame, commandes_sans_tarif: pd.DataFrame):
    """Affiche l'onglet des r√©sultats avec les filtres et les statistiques."""
    st.subheader("Commandes avec Tarifs Calcul√©s")
    st.dataframe(commandes_tarif√©es, use_container_width=True)
    
    if not commandes_sans_tarif.empty:
        st.subheader("Commandes Sans Tarifs")
        st.dataframe(commandes_sans_tarif, use_container_width=True)

def display_graphics_tab(commandes_tarif√©es: pd.DataFrame):
    """Affiche des graphiques analytiques."""
    st.subheader("Analyses Graphiques")
    
    chart_type = st.selectbox(
        "S√©lectionner le type d'analyse",
        ["Co√ªt par Partenaire", "Co√ªt par Pays", "Co√ªt par Service"]
    )
    
    if chart_type == "Co√ªt par Partenaire":
        data = commandes_tarif√©es.groupby("Nom du partenaire")["Tarif Total"].agg(
            ['sum', 'mean', 'count']
        ).reset_index()
        fig = px.bar(
            data,
            x="Nom du partenaire",
            y="sum",
            title="Co√ªt total par Partenaire",
            labels={"sum": "Co√ªt total (‚Ç¨)", "Nom du partenaire": "Partenaire"}
        )
    elif chart_type == "Co√ªt par Pays":
        data = commandes_tarif√©es.groupby("Pays destination")["Tarif Total"].agg(
            ['sum', 'mean', 'count']
        ).reset_index()
        fig = px.bar(
            data,
            x="Pays destination",
            y="sum",
            title="Co√ªt total par Pays",
            labels={"sum": "Co√ªt total (‚Ç¨)", "Pays destination": "Pays"}
        )
    else:
        data = commandes_tarif√©es.groupby("Service de transport")["Tarif Total"].agg(
            ['sum', 'mean', 'count']
        ).reset_index()
        fig = px.bar(
            data,
            x="Service de transport",
            y="sum",
            title="Co√ªt total par Service",
            labels={"sum": "Co√ªt total (‚Ç¨)", "Service de transport": "Service"}
        )
    
    st.plotly_chart(fig, use_container_width=True)

# Fonctions de t√©l√©chargement
def convertir_df_en_excel(df: pd.DataFrame) -> bytes:
    """Convertit un DataFrame en fichier Excel pour le t√©l√©chargement."""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False)
    return output.getvalue()

def display_download_tab(commandes_tarif√©es: pd.DataFrame, commandes_sans_tarif: pd.DataFrame):
    """Affiche les options de t√©l√©chargement des r√©sultats."""
    st.subheader("T√©l√©chargement des R√©sultats")
    
    col1, col2 = st.columns(2)
    with col1:
        st.download_button(
            "üì• T√©l√©charger commandes avec tarifs",
            convertir_df_en_excel(commandes_tarif√©es),
            "commandes_avec_tarifs.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    with col2:
        st.download_button(
            "üì• T√©l√©charger commandes sans tarif",
            convertir_df_en_excel(commandes_sans_tarif),
            "commandes_sans_tarifs.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# Fonction principale
def main():
    """Fonction principale de l'application Streamlit."""
    st.title("Application de Calcul des Tarifs de Transport")

    # Param√®tres de taxe gasoil
    st.sidebar.subheader("Param√®tres de la Taxe Gasoil")
    taxe_par_transporteur = {t: st.sidebar.number_input(f"Taxe {t} (%)", min_value=0.0, max_value=100.0, step=0.1)
                             for t in ["Colissimo", "Chronopost", "DHL", "UPS", "FedEx", "Mondial Relay"]}

    # T√©l√©chargement des fichiers
    with st.expander("T√©l√©chargez les fichiers au format Parquet"):
        commandes_file = st.file_uploader("Fichier des commandes", type=["parquet", "csv"])
        tarifs_file = st.file_uploader("Fichier des tarifs", type=["parquet", "csv"])
        prix_achat_file = st.file_uploader("Fichier des prix d'achat (optionnel)", type=["parquet", "csv"])

    if commandes_file and tarifs_file:
        format_type = "parquet" if commandes_file.name.endswith("parquet") else "csv"
        commandes = load_data(commandes_file, file_format=format_type)
        tarifs = load_data(tarifs_file, file_format=format_type)
        
        prix_achat_df = None
        if prix_achat_file:
            prix_achat_df = load_data(prix_achat_file, file_format=format_type)

        # Calcul des tarifs
        st.write("Calcul des tarifs...")
        commandes_tarif√©es, commandes_sans_tarif = application_calcul_tarif_batch(
            commandes, tarifs, taxe_par_transporteur, prix_achat_df
        )
        
        # Affichage des r√©sultats
        tabs = st.tabs(["R√©sultats", "Graphiques", "T√©l√©chargement"])
        with tabs[0]:
            display_results_tab(commandes_tarif√©es, commandes_sans_tarif)
        with tabs[1]:
            display_graphics_tab(commandes_tarif√©es)
        with tabs[2]:
            display_download_tab(commandes_tarif√©es, commandes_sans_tarif)

if __name__ == "__main__":
    main()
